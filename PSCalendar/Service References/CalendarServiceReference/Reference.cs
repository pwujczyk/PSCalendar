//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSCalendar.CalendarServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/PSCalendarContract.Dto")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PSCalendar.CalendarServiceReference.ConsoleColor ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PSCalendar.CalendarServiceReference.EventType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PSCalendar.CalendarServiceReference.ConsoleColor Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventsId {
            get {
                return this.EventsIdField;
            }
            set {
                if ((this.EventsIdField.Equals(value) != true)) {
                    this.EventsIdField = value;
                    this.RaisePropertyChanged("EventsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PSCalendar.CalendarServiceReference.EventType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsoleColor", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public enum ConsoleColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkBlue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkGreen = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkCyan = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkRed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkMagenta = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkYellow = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gray = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DarkGray = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cyan = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Magenta = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        White = 15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventType", Namespace="http://schemas.datacontract.org/2004/07/PSCalendarContract.Dto")]
    public enum EventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sport = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Family = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Friends = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accenture = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BRE = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PawelPC = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gosia = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodicEvent", Namespace="http://schemas.datacontract.org/2004/07/PSCalendarContract.Dto")]
    [System.SerializableAttribute()]
    public partial class PeriodicEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PeriodTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PeriodicEventsIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PeriodType {
            get {
                return this.PeriodTypeField;
            }
            set {
                if ((this.PeriodTypeField.Equals(value) != true)) {
                    this.PeriodTypeField = value;
                    this.RaisePropertyChanged("PeriodType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PeriodicEventsId {
            get {
                return this.PeriodicEventsIdField;
            }
            set {
                if ((this.PeriodicEventsIdField.Equals(value) != true)) {
                    this.PeriodicEventsIdField = value;
                    this.RaisePropertyChanged("PeriodicEventsId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalendarServiceReference.ICalendar")]
    public interface ICalendar {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/GetDate", ReplyAction="http://tempuri.org/ICalendar/GetDateResponse")]
        void GetDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/AddEvent", ReplyAction="http://tempuri.org/ICalendar/AddEventResponse")]
        void AddEvent(PSCalendar.CalendarServiceReference.Event @event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/ChangeEvent", ReplyAction="http://tempuri.org/ICalendar/ChangeEventResponse")]
        void ChangeEvent(PSCalendar.CalendarServiceReference.Event @event);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/AddPeriodEveent", ReplyAction="http://tempuri.org/ICalendar/AddPeriodEveentResponse")]
        void AddPeriodEveent(PSCalendar.CalendarServiceReference.PeriodicEvent periodEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/GetEvents", ReplyAction="http://tempuri.org/ICalendar/GetEventsResponse")]
        PSCalendar.CalendarServiceReference.Event[] GetEvents(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/GetPeriodEvents", ReplyAction="http://tempuri.org/ICalendar/GetPeriodEventsResponse")]
        PSCalendar.CalendarServiceReference.PeriodicEvent[] GetPeriodEvents(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendar/Delete", ReplyAction="http://tempuri.org/ICalendar/DeleteResponse")]
        bool Delete(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalendarChannel : PSCalendar.CalendarServiceReference.ICalendar, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalendarClient : System.ServiceModel.ClientBase<PSCalendar.CalendarServiceReference.ICalendar>, PSCalendar.CalendarServiceReference.ICalendar {
        
        public CalendarClient() {
        }
        
        public CalendarClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalendarClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalendarClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalendarClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetDate() {
            base.Channel.GetDate();
        }
        
        public void AddEvent(PSCalendar.CalendarServiceReference.Event @event) {
            base.Channel.AddEvent(@event);
        }
        
        public void ChangeEvent(PSCalendar.CalendarServiceReference.Event @event) {
            base.Channel.ChangeEvent(@event);
        }
        
        public void AddPeriodEveent(PSCalendar.CalendarServiceReference.PeriodicEvent periodEvent) {
            base.Channel.AddPeriodEveent(periodEvent);
        }
        
        public PSCalendar.CalendarServiceReference.Event[] GetEvents(System.DateTime start, System.DateTime end) {
            return base.Channel.GetEvents(start, end);
        }
        
        public PSCalendar.CalendarServiceReference.PeriodicEvent[] GetPeriodEvents(System.DateTime start, System.DateTime end) {
            return base.Channel.GetPeriodEvents(start, end);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
    }
}
